#!/usr/bin/env node

/* globals db */
"use strict";

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var https = require('https');
var config = require('../data/config');
var sqlite3 = require('sqlite3').verbose();
var q = require('q');
var fs = require('fs');
var startTime = new Date();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  log('EHRaS is listening on ' + bind);
}

/**
 * create a log function that doesn't poop all over our test output
 */
function log(string) {
  if (process.env.NODE_ENV !== 'test') {
    console.log(string);
  }
}

/**
 * Ensure database is up and running
 */
if (process.env.NODE_ENV === "test") {
  global.db = new sqlite3.Database(config.db.test_location);
} else {
  global.db = new sqlite3.Database(config.db.location);
}

// db.on('trace', function(query){ console.log(query); });

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.general.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

// TODO enable SSL
//if (process.env.NODE_ENV === "test") {
var server = http.createServer(app);
// } else {
//   var server = https.createServer({
//     key: fs.readFileSync('data/ssl/key.key'),
//     cert: fs.readFileSync('data/ssl/cert.crt'),
//     ca: fs.readFileSync('data/ssl/bundle.ca-bundle')
//   }, app);
// }
/**
 * Set up listeners, then promise through database initialization and launch
 */

server.on('error', onError);
server.on('listening', onListening);
q.fcall(db.exec('CREATE TABLE IF NOT EXISTS "data" (id TEXT PRIMARY KEY, patientData TEXT); CREATE TABLE IF NOT EXISTS "sessions" (uuid TEXT, sk TEXT PRIMARY KEY, expires INTEGER);')).then(server.listen(port)).then(module.exports = server);
